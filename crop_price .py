# -*- coding: utf-8 -*-
"""Crop Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1apdG6pPG0T7TZ9JWjRA8jMN4okD42Dv9
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import StandardScaler
from datetime import datetime

data=pd.read_csv('/content/Tomato_price.csv')

data.dropna()

data.isna().sum()





data['yield'] = data['yield'].str.replace(',', '').astype(float)

X=data['yield']
y=data['model_price']
X_array = X.to_numpy().reshape(-1, 1)

scaler = StandardScaler()
X = scaler.fit_transform(X_array)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
#hyper parameter tuning
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]    }

from sklearn.model_selection import GridSearchCV

grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')

grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
best_estimator = grid_search.best_estimator_

print("Best Parameters:", best_params)

#y_pred = best_estimator.predict(X_test_scaled)

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
kfold=KFold(n_splits=140, shuffle=True, random_state=42)
cv_scores = cross_val_score(best_estimator, X_train, y_train, cv=kfold)
cv_mean_mse = -cv_scores.mean()

print(f"Accuracy: {cv_mean_mse*100.0}")

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
kfold=KFold(n_splits=140, shuffle=True, random_state=42)
cv_scores = cross_val_score(rf_model, X_train, y_train, cv=kfold)
cv_mean_acc = -cv_scores.mean()

print(f"Accuracy: {cv_mean_mse*100.0}")

y_pred = best_estimator.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
#save model
import joblib
model_filename='Random_forest2.pkl'
joblib.dump(best_estimator, model_filename)

#user Interface using gradio

pip install gradio

pip install rasterio

"""prediction price"""

import rasterio
import numpy as np

def load_crop_yield(crop_yield):
    
    predicted_price = randomforest.predict(yield_crop.reshape(1, 1))
    return yield_crop,predicted_price[0]





"""#User interface

"""

from keras.models import load_model
import joblib


randomforest = joblib.load('/content/drive/MyDrive/models/Random_forest.pkl')



import gradio as gr
interface = gr.Interface(fn=load_crop_yield,
                         inputs="text",
                         outputs=["text"],
                         title="Tomato Crop Yield and Price Predictor",
                         description=" Tomato crop field to predict   price.")

interface.launch()





